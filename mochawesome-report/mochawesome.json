{
  "stats": {
    "suites": 2,
    "tests": 15,
    "passes": 12,
    "pending": 0,
    "failures": 3,
    "start": "2023-02-13T15:53:56.917Z",
    "end": "2023-02-13T15:54:29.922Z",
    "duration": 33005,
    "testsRegistered": 15,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5ede953b-99dd-4409-a709-f0207a182a2a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
          "title": "UI tests",
          "fullFile": "C:\\Users\\mor_s\\Documents\\GitHub\\test\\src\\tests\\restaurant-ui.spec.ts",
          "file": "\\src\\tests\\restaurant-ui.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: Start browser in \"UI tests\"",
              "fullTitle": "UI tests \"before each\" hook: Start browser in \"UI tests\"",
              "timedOut": false,
              "duration": 2062,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        browser = new browser_1.BrowserWrapper();\n        resturantPage = yield browser.newPage(restaurant_page_1.RestaurantPage, config_json_1.default.baseUiUrl);\n    })",
              "err": {},
              "uuid": "06673657-df08-4267-88ca-711aaa22dceb",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook: Close browser in \"UI tests\"",
              "fullTitle": "UI tests \"after each\" hook: Close browser in \"UI tests\"",
              "timedOut": false,
              "duration": 60,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield browser.close();\n    })",
              "err": {},
              "uuid": "f914afc9-dd08-4a5a-a1b2-8f5dbef819c4",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Validate \"Create new Restaurant Popup\" opened",
              "fullTitle": "UI tests Validate \"Create new Restaurant Popup\" opened",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield resturantPage.clickreateNewRestaurantButtone();\n    let actualResult = yield resturantPage.checkIfTitleInPopupExcit();\n    (0, chai_1.expect)(actualResult, 'Restaurants popup was not opened').to.be.true;\n});",
              "err": {},
              "uuid": "8cfab5b3-4898-4c39-8efe-5d27c962ee9d",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check there is no rest via UI",
              "fullTitle": "UI tests check there is no rest via UI",
              "timedOut": false,
              "duration": 5010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    // Assume there is no restaurents by UI\n    sizeOfTable = yield resturantPage.checkRows();\n    console.log(sizeOfTable);\n    (0, chai_1.expect)(sizeOfTable).to.be.equal(null);\n});",
              "err": {},
              "uuid": "7209dad4-3423-4f4a-a255-ac57c2c36803",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check there is no rest via API",
              "fullTitle": "UI tests check there is no rest via API",
              "timedOut": false,
              "duration": 375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a;\nreturn __awaiter(this, void 0, void 0, function* () {\n    // Assume there is no restaurents double check by API\n    const restaurants = yield restaurantsAPI_1.default.getRestaurants();\n    console.log(restaurants);\n    (0, chai_1.expect)((_a = restaurants.data) === null || _a === void 0 ? void 0 : _a.length).to.be.equal(0); // we create only one restreunt so we expect that restaurants.length will be equal 1\n});",
              "err": {},
              "uuid": "afa98a5e-dad1-44ae-bb48-368854f4e3d7",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create a new resteraunt",
              "fullTitle": "UI tests create a new resteraunt",
              "timedOut": false,
              "duration": 4399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield resturantPage.clickreateNewRestaurantButtone();\n    yield resturantPage.fillnewrest();\n    yield delay(2000);\n    yield resturantPage.closePopUp();\n    yield delay(2000);\n});",
              "err": {},
              "uuid": "9c405fa7-093c-49a9-997f-06217e129839",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if restruant was added via UI",
              "fullTitle": "UI tests check if restruant was added via UI",
              "timedOut": false,
              "duration": 423,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    sizeOfTable = yield resturantPage.checkRows();\n    console.log(sizeOfTable);\n    (0, chai_1.expect)(sizeOfTable === null || sizeOfTable === void 0 ? void 0 : sizeOfTable.length).to.be.equal(1);\n});",
              "err": {},
              "uuid": "de727252-aa79-4188-a138-5ecde4fe8c18",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if restruant was added via API",
              "fullTitle": "UI tests check if restruant was added via API",
              "timedOut": false,
              "duration": 330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _a, _b;\nreturn __awaiter(this, void 0, void 0, function* () {\n    const restaurants = yield restaurantsAPI_1.default.getRestaurants();\n    console.log(restaurants);\n    (0, chai_1.expect)((_a = restaurants.data) === null || _a === void 0 ? void 0 : _a.length).to.be.equal(1); // we create only one restreunt so we expect that restaurants.length will be equal 1\n    (0, chai_1.expect)((_b = restaurants.data) === null || _b === void 0 ? void 0 : _b.length).to.be.equal(sizeOfTable.length);\n});",
              "err": {},
              "uuid": "69907a96-142b-4bff-9b85-59a808a1a806",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete resterunt",
              "fullTitle": "UI tests delete resterunt",
              "timedOut": false,
              "duration": 5089,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield delay(5000);\n    yield resturantPage.DeleteButton();\n    let actualResult = yield resturantPage.checkIfTitleDelteExcit(); // after deleted should be popup message\n    (0, chai_1.expect)(actualResult).to.be.true;\n    yield delay(5000);\n});",
              "err": {
                "message": "AssertionError: expected false to be true",
                "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (src\\tests\\restaurant-ui.spec.ts:70:31)\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\restaurant-ui.spec.ts:5:58)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "9514cc87-73e5-4d96-8ba4-ab1cced29241",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if restruant was deleted UI",
              "fullTitle": "UI tests check if restruant was deleted UI",
              "timedOut": false,
              "duration": 394,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    sizeOfTable = yield resturantPage.checkRows();\n    console.log(sizeOfTable);\n    (0, chai_1.expect)(sizeOfTable).to.be.equal(null);\n});",
              "err": {
                "message": "AssertionError: expected [ [ '0', '10', 'mor', 'haifa', …(2) ] ] to equal null",
                "estack": "AssertionError: expected [ [ '0', '10', 'mor', 'haifa', …(2) ] ] to equal null\n    at Context.<anonymous> (src\\tests\\restaurant-ui.spec.ts:77:31)\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\restaurant-ui.spec.ts:5:58)",
                "diff": null
              },
              "uuid": "7333d545-fa7a-439e-a9fb-b46e2650cf75",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if restruant was deleted",
              "fullTitle": "UI tests check if restruant was deleted",
              "timedOut": false,
              "duration": 361,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var _a;\nreturn __awaiter(this, void 0, void 0, function* () {\n    const restaurants = yield restaurantsAPI_1.default.getRestaurants();\n    console.log(restaurants);\n    (0, chai_1.expect)((_a = restaurants.data) === null || _a === void 0 ? void 0 : _a.length).to.be.equal(0); // we create only one restreunt so we expect that restaurants.length will be equal 1\n});",
              "err": {
                "message": "AssertionError: expected 1 to equal +0",
                "estack": "AssertionError: expected 1 to equal +0\n    at Context.<anonymous> (src\\tests\\restaurant-ui.spec.ts:83:44)\n    at Generator.next (<anonymous>)\n    at fulfilled (src\\tests\\restaurant-ui.spec.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "6be09b63-c844-4318-8e9d-4ff547a932a5",
              "parentUUID": "1348659a-e6c4-4b2d-9a0f-ede517299c20",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cfab5b3-4898-4c39-8efe-5d27c962ee9d",
            "7209dad4-3423-4f4a-a255-ac57c2c36803",
            "afa98a5e-dad1-44ae-bb48-368854f4e3d7",
            "9c405fa7-093c-49a9-997f-06217e129839",
            "de727252-aa79-4188-a138-5ecde4fe8c18",
            "69907a96-142b-4bff-9b85-59a808a1a806"
          ],
          "failures": [
            "9514cc87-73e5-4d96-8ba4-ab1cced29241",
            "7333d545-fa7a-439e-a9fb-b46e2650cf75",
            "6be09b63-c844-4318-8e9d-4ff547a932a5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16487,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
          "title": "Restaurants tests",
          "fullFile": "C:\\Users\\mor_s\\Documents\\GitHub\\test\\src\\tests\\restaurant.spec.ts",
          "file": "\\src\\tests\\restaurant.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: Reset restaurant server in \"Restaurants tests\"",
              "fullTitle": "Restaurants tests \"before all\" hook: Reset restaurant server in \"Restaurants tests\"",
              "timedOut": false,
              "duration": 359,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        //Arrange\n        yield restaurantsAPI_1.default.resetServer();\n    })",
              "err": {},
              "uuid": "7e38751f-2a6c-4e71-9166-a44082ec8cd1",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate the amount of restaurants",
              "fullTitle": "Restaurants tests Validate the amount of restaurants",
              "timedOut": false,
              "duration": 357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        //Act\n        const restaurants = yield restaurantsAPI_1.default.getRestaurants();\n        console.log(restaurants);\n        //Assert\n        (0, chai_1.expect)(restaurants.success).to.be.true;\n        const actualAmount = (_a = restaurants.data) === null || _a === void 0 ? void 0 : _a.length;\n        (0, chai_1.expect)(actualAmount).to.equal(3, 'Restaurants amount is not as expected');\n    })",
              "err": {},
              "uuid": "35697a55-1340-4ce2-93d1-cb498fb9ce73",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get restaurant by id",
              "fullTitle": "Restaurants tests Get restaurant by id",
              "timedOut": false,
              "duration": 659,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        //Arrange\n        const myNewRest = { address: 'My Addess 1', id: 233, name: 'My Restaurant', score: 2.3 };\n        const createResponse = yield restaurantsAPI_1.default.createRestaurant(myNewRest);\n        //Act\n        const getByIdResponse = yield restaurantsAPI_1.default.getRestaurantById(233);\n        console.log(getByIdResponse.data);\n        //Assert\n        (0, chai_1.expect)(getByIdResponse.status).to.equal(200);\n        (0, chai_1.expect)(getByIdResponse.success).to.be.true;\n        (0, chai_1.expect)(getByIdResponse.data).to.deep.equal(myNewRest);\n    })",
              "err": {},
              "uuid": "0ffc192b-a514-4a27-b96a-36f17809b900",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update exsisting restaurant",
              "fullTitle": "Restaurants tests Update exsisting restaurant",
              "timedOut": false,
              "duration": 656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const getByIdResponse = yield restaurantsAPI_1.default.getRestaurantById(233); // save the current data of id 233\n        const newData = { address: 'My Addess 6', id: 233, name: 'Mor Restaurant', score: 2.3 }; // create a new data\n        //Act\n        const patchByIdResponse = yield restaurantsAPI_1.default.updateRestaurant(newData);\n        //Assert\n        (0, chai_1.expect)(patchByIdResponse.status).to.equal(200);\n        (0, chai_1.expect)(patchByIdResponse.data).to.not.equal(getByIdResponse.data); // check that the data has changed\n    })",
              "err": {},
              "uuid": "e801808e-5529-48c7-91aa-31abdda247ea",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete exsisting restaurant",
              "fullTitle": "Restaurants tests Delete exsisting restaurant",
              "timedOut": false,
              "duration": 646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const getByIdResponse = yield restaurantsAPI_1.default.getRestaurantById(233); // save the current data of id 233\n        //Act\n        const deleteByIdResponse = yield restaurantsAPI_1.default.deleteRestaurantById(233);\n        //Assert\n        (0, chai_1.expect)(deleteByIdResponse.status).to.equal(200);\n    })",
              "err": {},
              "uuid": "de9d5076-26fc-4b2f-99a8-c185ebe967cb",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the amount of restaurants",
              "fullTitle": "Restaurants tests Validate the amount of restaurants",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        var _b;\n        //Act\n        const restaurants = yield restaurantsAPI_1.default.getRestaurants();\n        console.log(restaurants);\n        //Assert\n        (0, chai_1.expect)(restaurants.success).to.be.true;\n        const actualAmount = (_b = restaurants.data) === null || _b === void 0 ? void 0 : _b.length;\n        (0, chai_1.expect)(actualAmount).to.equal(3, 'Restaurants amount is not as expected');\n    })",
              "err": {},
              "uuid": "7bfcd32c-06cf-461f-af1f-5a45e2383247",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get non exsisting restaurant",
              "fullTitle": "Restaurants tests Get non exsisting restaurant",
              "timedOut": false,
              "duration": 317,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        //Act\n        const getByIdResponse = yield restaurantsAPI_1.default.getRestaurantById(233);\n        //Assert\n        (0, chai_1.expect)(getByIdResponse.error).to.equal('restaurant with given id not found');\n        (0, chai_1.expect)(getByIdResponse.success).to.be.false;\n        (0, chai_1.expect)(getByIdResponse.status).to.equal(404);\n    })",
              "err": {},
              "uuid": "14025e4f-4747-45a5-a1db-04dab42f33c8",
              "parentUUID": "a60d266a-aef1-4848-9dce-1798fa1cff2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35697a55-1340-4ce2-93d1-cb498fb9ce73",
            "0ffc192b-a514-4a27-b96a-36f17809b900",
            "e801808e-5529-48c7-91aa-31abdda247ea",
            "de9d5076-26fc-4b2f-99a8-c185ebe967cb",
            "7bfcd32c-06cf-461f-af1f-5a45e2383247",
            "14025e4f-4747-45a5-a1db-04dab42f33c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}